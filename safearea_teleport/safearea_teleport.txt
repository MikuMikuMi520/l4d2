"Games"
{
	"left4dead2"
	{
		"Addresses"
		{
			"TheCount"
			{
				"linux"
				{
					"signature"	"nav_update_lighting"
					"read"		"17"
				}
				"windows"
				{
					"signature"	"nav_update_lighting"
					"read"		"70"
				}
			}
			"TerrorNavMesh"
			{
				"linux"
				{
					"signature"	"TheNavMesh"
				}
				"windows"
				{
					"signature"	"CommandNavSave"
					"read"		"11"
				}
				"read" "0"
			}
			/**
			 * Windows: Uses an offset of "CDirectorMusicBanks::OnRoundStart" to get the Director's address.
			 * Linux: Uses a symbol pointing to the Director's address.
			 **/
			"CDirector"
			{
				"linux"
				{
					"signature"	"TheDirector"
				}
				"windows"
				{
					"signature"	"CDirectorMusicBanks::OnRoundStart"
					"read"		"12"
				}
				"read"		"0"
			}
		}

		"Offsets"
		{
			/* TerrorNavArea::ScriptGetSpawnAttributes(TerrorNavArea *__hidden this) */
			"TerrorNavArea::ScriptGetSpawnAttributes"
			{
				"linux"		"300"	//mov	 eax, [eax+12Ch]
				"windows"	"296"	//mov	 eax, [ecx+128h]
			}
			/* CPropDoorRotatingCheckpoint::IsCheckpointDoor(CPropDoorRotatingCheckpoint *__hidden this) */
			"CPropDoorRotatingCheckpoint::IsCheckpointDoor"
			{
				"linux"		"286"
				"windows"	"238"
			}
			/* CPropDoorRotatingCheckpoint::IsCheckpointExitDoor(CPropDoorRotatingCheckpoint *__hidden this) */
			"CPropDoorRotatingCheckpoint::IsCheckpointExitDoor"
			{
				"linux"		"287"
				"windows"	"239"
			}
			/**
			 * CTerrorPlayer::GetFlowDistance(CNavArea const*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. Use IDA to get the VTable dump for the "CTerrorPlayer" class on Windows.
			 * 3. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 4. Look for the target function in the Windows binary.
			 * 5. Look for the 7-byte float (FLD) instruction.
			 * 6. The offset at the very end of that line of code is the offset for "m_flow".
			 *
			 * How to find on Linux:
			 * 1. Locate the function.
			 * 2. Look for the 9-byte move (MOVSS) instruction.
			 * 3. The offset at the very end of that line of code is the offset for "m_flow".
			 **/
			"CTerrorPlayer::GetFlowDistance::m_flow"
			{
				"linux"		"340"
				"windows"	"332"
			}
		}
	
		"Signatures"
		{
			/* nav_update_lighting(const CCommand *) */
			"nav_update_lighting"
			{
				"library"	"server"
				"linux"		"@_ZL19nav_update_lightingRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x33\x2A\x83\x2A\x2A\x75"
				/* ? ? ? ? ? ? 57 33 ? 83 ? ? 75 */
			}
			"TheNavMesh"
			{
				"library"	"server"
				"linux"		"@TheNavMesh"
			}
			"CommandNavSave"
			{
				"library"	"server"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x84"
				/* ? ? ? ? ? ? ? 74 ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? 8B 0D ? ? ? ? 84 */
			}
			"TheDirector"
			{
				"library"	"server"
				"linux"		"@TheDirector"
			}
			"CDirectorMusicBanks::OnRoundStart"
			{
				"library"	"server"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F"
				/* ? ? ? ? ? ? 56 57 8B ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 0F */
			}
			/* CTerrorPlayer::CleanupPlayerState(void) */
			"CTerrorPlayer::CleanupPlayerState"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18CleanupPlayerStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x0F\x2A\x2A\x83\x2A\x2A\x56\x8B\x2A\xC7"
				/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 0F ? ? 83 ? ? 56 8B ? C7 */
			}
			/* TerrorNavMesh::GetLastCheckpoint(TerrorNavMesh *__hidden this) */
			"TerrorNavMesh::GetLastCheckpoint"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavMesh17GetLastCheckpointEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x33\x2A\x57\x85\x2A\x7E\x2A\x8B\xB1\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
				/* ? ? ? ? ? ? 56 33 ? 57 85 ? 7E ? 8B B1 ? ? ? ? 8B ? 8B */
			}
			/* TerrorNavMesh::GetInitialCheckpoint(void)const */
			"TerrorNavMesh::GetInitialCheckpoint"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavMesh20GetInitialCheckpointEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x89\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x33"
				/* ? ? ? ? ? ? 89 ? ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 75 ? 33 */
			}
			/* Checkpoint::ContainsArea(TerrorNavArea *)const */
			"Checkpoint::ContainsArea"
			{
				"library"	"server"
				"linux"		"@_ZNK10Checkpoint12ContainsAreaEP13TerrorNavArea"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x33\x2A\x56\x85\x2A\x7E\x2A\x8B\x2A\x8B"
				/* ? ? ? ? ? ? 33 ? 56 85 ? 7E ? 8B ? 8B */
			}
			/* CDirectorChallengeMode::FindRescueAreaTrigger(void) */
			"CDirectorChallengeMode::FindRescueAreaTrigger"
			{
				"library"	"server"
				"linux"		"@_ZN22CDirectorChallengeMode21FindRescueAreaTriggerEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x53\x57\x8B\xB8"
				/* ? ? ? ? ? ? ? ? 83 ? ? 53 57 8B B8 */
			}
			/* CBaseTrigger::IsTouching(CBaseTrigger *__hidden this, CBaseEntity *) */
			"CBaseTrigger::IsTouching"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseTrigger10IsTouchingEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x89\x2A\x2A\xEB\x2A\xC7\x45\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x51\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x33"
				/* ? ? ? ? ? ? 8B ? ? 85 ? 74 ? 8B ? 8B ? ? FF ? 8B ? 89 ? ? EB ? C7 45 ? ? ? ? ? 8D ? ? 51 8D 8E ? ? ? ? E8 ? ? ? ? 33 */
			}
			/* CTerrorPlayer::OnRevived(CTerrorPlayer *__hidden this) */
			"CTerrorPlayer::OnRevived"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer9OnRevivedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8"
				/* ? ? ? ? ? ? 53 56 8B ? 8B ? 8B 90 ? ? ? ? 57 FF ? 84 ? 0F 84 ? ? ? ? 8B ? E8 */
			}
		}
	}
}
